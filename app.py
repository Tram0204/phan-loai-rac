import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image, ImageEnhance, ImageOps
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import os
import time
import hashlib
from datetime import datetime
import io
import base64
import cv2

# T·∫Øt c√°c warning c·ªßa TensorFlow
tf.get_logger().setLevel('ERROR')
import warnings
warnings.filterwarnings('ignore')

# ƒê·∫£m b·∫£o set_page_config l√† d√≤ng ƒë·∫ßu ti√™n
st.set_page_config(
    page_title="Ph√¢n lo·∫°i r√°c th√¥ng minh AI",
    page_icon="‚ôªÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# === Custom CSS ===
def load_custom_css():
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #00C9FF 0%, #92FE9D 100%);
        padding: 2rem;
        border-radius: 10px;
        text-align: center;
        color: white;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #00C9FF;
    }
    
    .drag-drop-area {
        border: 2px dashed #00C9FF;
        border-radius: 10px;
        padding: 2rem;
        text-align: center;
        background: #f8f9fa;
        margin: 1rem 0;
    }
    
    .result-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin: 1rem 0;
        border-left: 4px solid #28a745;
    }
    
    .warning-card {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
        border-left: 4px solid #f39c12;
    }
    
    .dark-mode {
        background-color: #1e1e1e;
        color: white;
    }
    
    .recycling-tip {
        background: #e8f5e8;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem 0;
        border-left: 4px solid #28a745;
    }
    </style>
    """, unsafe_allow_html=True)

# === Th√¥ng tin l·ªõp r√°c v·ªõi tips t√°i ch·∫ø ===
LABELS_INFO = {
    "cardboard": {
        "vi": "B√¨a c·ª©ng",
        "info": "B√¨a c·ª©ng nh∆∞ h·ªôp gi·∫•y, h·ªôp ƒë·ª±ng pizza...",
        "image": "resources/cardboard.jpg",
        "recycling_tips": [
            "Th√°o b·ªè bƒÉng d√≠nh v√† kim ghim tr∆∞·ªõc khi t√°i ch·∫ø",
            "L√†m ph·∫≥ng h·ªôp ƒë·ªÉ ti·∫øt ki·ªám kh√¥ng gian",
            "Kh√¥ng t√°i ch·∫ø h·ªôp pizza c√≥ d√≠nh d·∫ßu m·ª°",
            "C√≥ th·ªÉ t√°i ch·∫ø th√†nh gi·∫•y m·ªõi ho·∫∑c bao b√¨ kh√°c"
        ],
        "collection_points": "Th√πng r√°c t√°i ch·∫ø m√†u xanh l√°",
        "color": "#8B4513"
    },
    "glass": {
        "vi": "Th·ªßy tinh",
        "info": "Chai l·ªç th·ªßy tinh, m·∫£nh v·ª° th·ªßy tinh...",
        "image": "resources/glass.jpg",
        "recycling_tips": [
            "R·ª≠a s·∫°ch tr∆∞·ªõc khi b·ªè v√†o th√πng t√°i ch·∫ø",
            "Th√°o n·∫Øp kim lo·∫°i ho·∫∑c nh·ª±a",
            "Kh√¥ng tr·ªôn v·ªõi g·ªëm s·ª©",
            "Th·ªßy tinh c√≥ th·ªÉ t√°i ch·∫ø v√¥ h·∫°n l·∫ßn"
        ],
        "collection_points": "Th√πng r√°c t√°i ch·∫ø m√†u xanh d∆∞∆°ng",
        "color": "#00CED1"
    },
    "metal": {
        "vi": "Kim lo·∫°i",
        "info": "Lon nh√¥m, h·ªôp thi·∫øc...",
        "image": "resources/metal.jpg",
        "recycling_tips": [
            "R·ª≠a s·∫°ch th·ª©c ƒÉn c√≤n s√≥t l·∫°i",
            "Kh√¥ng c·∫ßn th√°o nh√£n d√°n",
            "Lon nh√¥m c√≥ th·ªÉ t√°i ch·∫ø th√†nh lon m·ªõi trong 60 ng√†y",
            "Kim lo·∫°i ti·∫øt ki·ªám 95% nƒÉng l∆∞·ª£ng khi t√°i ch·∫ø"
        ],
        "collection_points": "Th√πng r√°c t√°i ch·∫ø m√†u x√°m",
        "color": "#C0C0C0"
    },
    "paper": {
        "vi": "Gi·∫•y",
        "info": "Gi·∫•y b√°o, gi·∫•y in, s√°ch c≈©...",
        "image": "resources/paper.jpg",
        "recycling_tips": [
            "Th√°o b·ªè k·∫πp gi·∫•y v√† ghim b·∫•m",
            "Kh√¥ng t√°i ch·∫ø gi·∫•y c√≥ d√≠nh bƒÉng d√≠nh",
            "Gi·∫•y ∆∞·ªõt kh√¥ng th·ªÉ t√°i ch·∫ø",
            "1 t·∫•n gi·∫•y t√°i ch·∫ø ti·∫øt ki·ªám 17 c√¢y"
        ],
        "collection_points": "Th√πng r√°c t√°i ch·∫ø m√†u xanh l√°",
        "color": "#228B22"
    },
    "plastic": {
        "vi": "Nh·ª±a",
        "info": "Chai nh·ª±a, bao b√¨ nh·ª±a...",
        "image": "resources/plastic.jpg",
        "recycling_tips": [
            "Ki·ªÉm tra m√£ s·ªë t√°i ch·∫ø tr√™n ƒë√°y chai",
            "R·ª≠a s·∫°ch v√† th√°o n·∫Øp",
            "Nh·ª±a s·ªë 1,2,5 d·ªÖ t√°i ch·∫ø nh·∫•t",
            "Tr√°nh nh·ª±a ƒëen v√¨ kh√≥ ph√¢n lo·∫°i"
        ],
        "collection_points": "Th√πng r√°c t√°i ch·∫ø m√†u v√†ng",
        "color": "#FFD700"
    },
    "trash": {
        "vi": "R√°c th·∫£i kh√°c",
        "info": "R√°c h·ªØu c∆°, t√£ gi·∫•y, g√≥i bim bim...",
        "image": "resources/trash.jpg",
        "recycling_tips": [
            "Ph√¢n lo·∫°i r√°c h·ªØu c∆° ƒë·ªÉ l√†m ph√¢n compost",
            "T√£ gi·∫•y c·∫ßn b·ªè v√†o t√∫i ri√™ng",
            "R√°c th·ª±c ph·∫©m c√≥ th·ªÉ ·ªß ph√¢n",
            "Gi·∫£m thi·ªÉu r√°c th·∫£i b·∫±ng c√°ch t√°i s·ª≠ d·ª•ng"
        ],
        "collection_points": "Th√πng r√°c th√¥ng th∆∞·ªùng m√†u ƒëen",
        "color": "#800080"
    }
}

# === Initialize session state ===
if 'history_data' not in st.session_state:
    st.session_state.history_data = []
if 'dark_mode' not in st.session_state:
    st.session_state.dark_mode = False
if 'confidence_threshold' not in st.session_state:
    st.session_state.confidence_threshold = 0.7
if 'processed_images' not in st.session_state:
    st.session_state.processed_images = {}

@st.cache_resource
def load_model():
    try:
        return tf.keras.models.load_model("trashnet_model.keras")
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
        st.stop()

model = load_model()
class_names = list(LABELS_INFO.keys())

# === Utility Functions ===
def get_image_hash(image):
    """T·∫°o hash cho ·∫£nh ƒë·ªÉ ph√°t hi·ªán tr√πng l·∫∑p"""
    image_bytes = io.BytesIO()
    image.save(image_bytes, format='PNG')
    return hashlib.md5(image_bytes.getvalue()).hexdigest()

def auto_rotate_image(image):
    """T·ª± ƒë·ªông xoay ·∫£nh d·ª±a tr√™n d·ªØ li·ªáu EXIF"""
    try:
        return ImageOps.exif_transpose(image)
    except:
        return image

def enhance_image(image, brightness=1.0, contrast=1.0):
    """TƒÉng c∆∞·ªùng ƒë·ªô s√°ng v√† ƒë·ªô t∆∞∆°ng ph·∫£n c·ªßa ·∫£nh"""
    enhancer = ImageEnhance.Brightness(image)
    image = enhancer.enhance(brightness)
    enhancer = ImageEnhance.Contrast(image)
    image = enhancer.enhance(contrast)
    return image

def process_image(image: Image.Image, enhance_params=None):
    """X·ª≠ l√Ω ·∫£nh v·ªõi c√°c t√πy ch·ªânh tƒÉng c∆∞·ªùng"""
    # T·ª± ƒë·ªông xoay
    image = auto_rotate_image(image)
    
    # TƒÉng c∆∞·ªùng n·∫øu c√≥ tham s·ªë
    if enhance_params:
        image = enhance_image(image, 
                            brightness=enhance_params['brightness'],
                            contrast=enhance_params['contrast'])
    
    img = image.convert("RGB").resize((224, 224))
    array = tf.keras.preprocessing.image.img_to_array(img)
    array = array / 255.0
    return np.expand_dims(array, axis=0)

def create_confidence_chart(predictions, labels):
    """T·∫°o bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c ƒë·ªô tin c·∫≠y"""
    fig = go.Figure(data=[
        go.Bar(
            x=predictions,
            y=labels,
            orientation='h',
            marker_color=['#ff6b6b' if p < 0.7 else '#4ecdc4' for p in predictions],
            text=[f'{p:.1%}' for p in predictions],
            textposition='auto',
        )
    ])
    
    fig.update_layout(
        title="ƒê·ªô tin c·∫≠y d·ª± ƒëo√°n",
        xaxis_title="X√°c su·∫•t",
        yaxis_title="Lo·∫°i r√°c",
        height=400,
        showlegend=False
    )
    
    return fig

# === Main Interface ===
def main():
    load_custom_css()
    
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>ü§ñ AI Ph√¢n lo·∫°i r√°c th√¥ng minh</h1>
        <p>·ª®ng d·ª•ng AI ti√™n ti·∫øn gi√∫p ph√¢n lo·∫°i r√°c v√† b·∫£o v·ªá m√¥i tr∆∞·ªùng</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        
        # Dark mode toggle
        if st.checkbox("üåô Ch·∫ø ƒë·ªô t·ªëi", value=st.session_state.dark_mode):
            st.session_state.dark_mode = True
            st.markdown('<style>body {background-color: #1e1e1e; color: white;}</style>', 
                       unsafe_allow_html=True)
    
        # Image enhancement
        st.subheader("üì∏ TƒÉng c∆∞·ªùng ·∫£nh")
        brightness = st.slider("ƒê·ªô s√°ng", 0.5, 2.0, 1.0, 0.1)
        contrast = st.slider("ƒê·ªô t∆∞∆°ng ph·∫£n", 0.5, 2.0, 1.0, 0.1)
        
        # Camera capture
        st.subheader("üì∑ Ch·ª•p ·∫£nh tr·ª±c ti·∫øp")
        camera_image = st.camera_input("Ch·ª•p ·∫£nh r√°c")
        
        # Clear history
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠"):
            st.session_state.history_data = []
            st.session_state.processed_images = {}
            st.success("ƒê√£ x√≥a l·ªãch s·ª≠!")
    
    # Main content
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üì§ T·∫£i l√™n h√¨nh ·∫£nh")
        
        # Drag and drop area
        st.markdown("""
        <div class="drag-drop-area">
            <h3>üéØ K√©o th·∫£ ho·∫∑c click ƒë·ªÉ t·∫£i ·∫£nh</h3>
            <p>H·ªó tr·ª£ JPG, PNG, JPEG ‚Ä¢ T·ªëi ƒëa 200MB m·ªói ·∫£nh</p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_files = st.file_uploader(
            "Ch·ªçn nhi·ªÅu ·∫£nh", 
            accept_multiple_files=True, 
            type=["jpg", "jpeg", "png"],
            label_visibility="collapsed"
        )
        
        # Process camera image
        if camera_image:
            uploaded_files = [camera_image] + (uploaded_files or [])
    
    with col2:
        st.subheader("üìä Th·ªëng k√™ nhanh")
        
        # Quick stats
        # Quick stats
        total_images = len(st.session_state.history_data)
        if total_images > 0:
            df = pd.DataFrame(st.session_state.history_data)
            most_common = df['Lo·∫°i r√°c'].mode().iloc[0] if not df.empty else "Ch∆∞a c√≥"
    
            try:
                df['ƒê·ªô ch√≠nh x√°c (%)'] = df['ƒê·ªô ch√≠nh x√°c (%)'].str.rstrip('%').astype(float)
                avg_confidence = df['ƒê·ªô ch√≠nh x√°c (%)'].dropna().mean()
                avg_display = f"{avg_confidence:.1f}%"
            except Exception as e:
                avg_display = "Kh√¥ng x√°c ƒë·ªãnh"
                st.warning(f"L·ªói x·ª≠ l√Ω ƒë·ªô ch√≠nh x√°c trung b√¨nh: {e}")

            st.metric("T·ªïng s·ªë ·∫£nh ƒë√£ x·ª≠ l√Ω", total_images)
            st.metric("Lo·∫°i r√°c ph·ªï bi·∫øn", most_common)
            st.metric("ƒê·ªô ch√≠nh x√°c trung b√¨nh", avg_display)
        else:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™")
    # Process uploaded images
    if uploaded_files:
        st.subheader("üîç K·∫øt qu·∫£ ph√¢n lo·∫°i")
        
        # Progress bar
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        results = []
        duplicate_count = 0
        low_confidence_count = 0
        
        for i, uploaded_file in enumerate(uploaded_files):
            # Update progress
            progress = (i + 1) / len(uploaded_files)
            progress_bar.progress(progress)
            status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}/{len(uploaded_files)}: {uploaded_file.name}")
            
            # Load and process image
            img = Image.open(uploaded_file)
            img_hash = get_image_hash(img)
            
            # Check for duplicates
            if img_hash in st.session_state.processed_images:
                duplicate_count += 1
                st.warning(f"‚ö†Ô∏è ·∫¢nh {uploaded_file.name} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥!")
                continue
            
            # Process image
            enhance_params = {'brightness': brightness, 'contrast': contrast}
            input_tensor = process_image(img, enhance_params)
            
            # Predict
            with st.spinner("ƒêang ph√¢n t√≠ch..."):
                prediction = model.predict(input_tensor, verbose=0)[0]
                predicted_idx = np.argmax(prediction)
                predicted_label = class_names[predicted_idx]
                confidence = prediction[predicted_idx]
            
            # Store result
            vi_label = LABELS_INFO[predicted_label]["vi"]
            description = LABELS_INFO[predicted_label]["info"]
            
            result = {
                'file': uploaded_file,
                'image': img,
                'label': predicted_label,
                'vi_label': vi_label,
                'confidence': confidence,
                'description': description,
                'prediction': prediction,
                'hash': img_hash
            }
            results.append(result)
            
            # Check confidence
            if confidence < st.session_state.confidence_threshold:
                low_confidence_count += 1
            
            # Store in session
            st.session_state.processed_images[img_hash] = result
            st.session_state.history_data.append({
                "T√™n ·∫£nh": uploaded_file.name,
                "Lo·∫°i r√°c": vi_label,
                "ƒê·ªô ch√≠nh x√°c (%)": f"{confidence*100:.2f}",
                "Th·ªùi gian": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            })
        
        # Clear progress
        progress_bar.empty()
        status_text.empty()
        
        # Show warnings
        if duplicate_count > 0:
            st.warning(f"‚ö†Ô∏è Ph√°t hi·ªán {duplicate_count} ·∫£nh tr√πng l·∫∑p!")
        
        if low_confidence_count > 0:
            st.warning(f"‚ö†Ô∏è {low_confidence_count} ·∫£nh c√≥ ƒë·ªô tin c·∫≠y th·∫•p (<{st.session_state.confidence_threshold*100:.0f}%)")
        
        # Display results
        for result in results:
            with st.container():
                st.markdown(f"""
                <div class="result-card">
                    <h4>üìã K·∫øt qu·∫£: {result['file'].name}</h4>
                </div>
                """, unsafe_allow_html=True)
                
                col1, col2, col3 = st.columns([1, 1, 1])
                
                with col1:
                    st.image(result['image'], caption="·∫¢nh g·ªëc", use_container_width=True)
                
                with col2:
                    st.markdown(f"**üè∑Ô∏è Lo·∫°i r√°c:** `{result['vi_label']}`")
                    st.markdown(f"**üìä ƒê·ªô ch√≠nh x√°c:** `{result['confidence']*100:.2f}%`")
                    st.markdown(f"**üìù M√¥ t·∫£:** {result['description']}")
                    
                    # Confidence warning
                    if result['confidence'] < st.session_state.confidence_threshold:
                        st.markdown("""
                        <div class="warning-card">
                            ‚ö†Ô∏è ƒê·ªô tin c·∫≠y th·∫•p! Ki·ªÉm tra l·∫°i k·∫øt qu·∫£.
                        </div>
                        """, unsafe_allow_html=True)
                
                with col3:
                    # Interactive confidence chart
                    labels = [LABELS_INFO[c]["vi"] for c in class_names]
                    fig = create_confidence_chart(result['prediction'], labels)
                    st.plotly_chart(fig, use_container_width=True)
                
                # Recycling tips
                st.markdown(f"""
                <div class="recycling-tip">
                    <h5>‚ôªÔ∏è H∆∞·ªõng d·∫´n t√°i ch·∫ø {result['vi_label']}:</h5>
                </div>
                """, unsafe_allow_html=True)
                
                tips = LABELS_INFO[result['label']]['recycling_tips']
                for tip in tips:
                    st.markdown(f"‚Ä¢ {tip}")
                
                collection_point = LABELS_INFO[result['label']]['collection_points']
                st.info(f"üìç **ƒêi·ªÉm thu gom:** {collection_point}")
                
                st.markdown("---")
    
    # Analytics Dashboard
    if st.session_state.history_data:
        st.subheader("üìà Ph√¢n t√≠ch th·ªëng k√™")
        
        df = pd.DataFrame(st.session_state.history_data)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribution chart
            trash_counts = df['Lo·∫°i r√°c'].value_counts()
            fig = px.pie(
                values=trash_counts.values,
                names=trash_counts.index,
                title="Ph√¢n b·ªë lo·∫°i r√°c"
            )
            st.plotly_chart(fig, use_container_width=True)
        
        # Heatmap of trash types by confidence
        if len(df) > 5:
            heatmap_data = df.pivot_table(
                values='Confidence',
                index='Lo·∫°i r√°c',
                aggfunc='mean'
            ).fillna(0)
            
            fig = px.imshow(
                heatmap_data.values.reshape(1, -1),
                x=heatmap_data.index,
                aspect='auto',
                title="ƒê·ªô tin c·∫≠y trung b√¨nh theo lo·∫°i r√°c"
            )
            st.plotly_chart(fig, use_container_width=True)
        
        # Export options
        st.subheader("üì§ Xu·∫•t d·ªØ li·ªáu")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            csv = df.to_csv(index=False).encode("utf-8-sig")
            st.download_button(
                "üìä T·∫£i t·ªáp CSV",
                data=csv,
                file_name=f"phan_loai_rac_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        with col2:
            excel_buffer = io.BytesIO()
            with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='Ph√¢n lo·∫°i r√°c')
            
            st.download_button(
                "üìà T·∫£i t·ªáp Excel",
                data=excel_buffer.getvalue(),
                file_name=f"phan_loai_rac_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        
        
        # History table
        st.subheader("üìù L·ªãch s·ª≠ chi ti·∫øt")
        
        # Search and filter
        search_term = st.text_input("üîç T√¨m ki·∫øm trong l·ªãch s·ª≠:")
        if search_term:
            filtered_df = df[df['T√™n ·∫£nh'].str.contains(search_term, case=False, na=False)]
        else:
            filtered_df = df
        
        # Display with formatting
        filtered_df['ƒê·ªô ch√≠nh x√°c (%)'] = pd.to_numeric(filtered_df['ƒê·ªô ch√≠nh x√°c (%)'], errors='coerce')

        st.dataframe(
            filtered_df.style.format({'ƒê·ªô ch√≠nh x√°c (%)': '{:.2f}%'}),
            use_container_width=True
)

    
    # Educational section
    with st.expander("üìö T√¨m hi·ªÉu v·ªÅ ph√¢n lo·∫°i r√°c"):
        st.markdown("### üåç T·∫°i sao ph√¢n lo·∫°i r√°c quan tr·ªçng?")
        st.markdown("""
        - **B·∫£o v·ªá m√¥i tr∆∞·ªùng**: Gi·∫£m √¥ nhi·ªÖm ƒë·∫•t, n∆∞·ªõc v√† kh√¥ng kh√≠
        - **Ti·∫øt ki·ªám t√†i nguy√™n**: T√°i ch·∫ø gi√∫p ti·∫øt ki·ªám nguy√™n li·ªáu th√¥
        - **Gi·∫£m kh√≠ th·∫£i**: Gi·∫£m ph√°t th·∫£i CO2 v√† kh√≠ nh√† k√≠nh
        - **Kinh t·∫ø tu·∫ßn ho√†n**: T·∫°o ra gi√° tr·ªã t·ª´ ch·∫•t th·∫£i
        """)
        
        st.markdown("### ‚ôªÔ∏è H∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ng lo·∫°i r√°c:")
        
        for label, info in LABELS_INFO.items():
            with st.container():
                st.markdown(f"#### {info['vi']}")
                
                col1, col2 = st.columns([1, 2])
                
                with col1:
                    if os.path.exists(info['image']):
                        st.image(info['image'], caption=f"H√¨nh minh h·ªça: {info['vi']}", width=150)
                
                with col2:
                    st.markdown(f"**M√¥ t·∫£:** {info['info']}")
                    st.markdown(f"**ƒêi·ªÉm thu gom:** {info['collection_points']}")
                    
                    st.markdown("**C√°ch t√°i ch·∫ø:**")
                    for tip in info['recycling_tips']:
                        st.markdown(f"‚Ä¢ {tip}")
                
                st.markdown("---")
    
    # Footer
    st.markdown("""
<div style="text-align: center; padding: 2rem; background: #f8f9fa; border-radius: 10px; margin-top: 2rem;">
    <h4>üì¨ Li√™n h·ªá</h4>
    <p>N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc, g√≥p √Ω ho·∫∑c mu·ªën h·ª£p t√°c, vui l√≤ng li√™n h·ªá:</p>
    <p>üìß Email: <a href="mailto:fftt0519@gmail.com">fftt0519@gmail.com</a></p>
    <p>üìû ƒêi·ªán tho·∫°i: 0339336571</p>
</div>
""", unsafe_allow_html=True)

if __name__ == "__main__":
    main()
